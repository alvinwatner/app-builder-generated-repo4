{
  "package_name": "com.creative.dory",
  "project_description": "The application is a Flutter project built using the Stacked architecture. It features a todo list management system, allowing users to create, update, and delete todo items. The application also includes functionality for displaying custom dialogs and bottom sheets, providing a rich user experience.",
  "architecture_overview": "The application follows the Stacked architecture, with separate folders for app setup, features, UI components, and utilities. It utilizes Stacked for state management, routing, and dependency injection. The project structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the stacked annotations.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This file defines a set of constant color values that are used throughout the application's user interface. It serves as a centralized repository for the app's color palette, promoting consistency and ease of maintenance.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/todo_action/todo_action_dialog.dart",
      "description": "This file contains the implementation of the `TodoActionDialog` class, which is responsible for displaying a custom dialog in the application's user interface. The dialog is used to confirm user actions related to todo items, such as creating, updating, or deleting a todo.",
      "class_diagram": "@startuml\nclass TodoActionDialog {\n  +DialogRequest request\n  +Function(DialogResponse) completer\n  +build(context: BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the UI for the dialog, which includes the title, description, and buttons to confirm or cancel the action.",
          "parameters": [
            "context: BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/add_todo/add_todo_sheet.dart",
      "description": "The `AddTodoSheet` class is responsible for providing a user interface for adding new todo items. It allows users to enter a title and description for a new todo, and provides functionality to save the new todo or cancel the operation.",
      "class_diagram": "@startuml\nclass AddTodoSheet {\n  -TextEditingController _titleController\n  -TextEditingController _descriptionController\n  -GlobalKey<FormState> _formKey\n  +AddTodoSheet({required completer, required request})\n  +State<AddTodoSheet> createState()\n  -dispose()\n  -build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "createState",
          "description": "Creates the state object for the `AddTodoSheet` widget.",
          "parameters": null,
          "return_type": "State<AddTodoSheet>"
        },
        {
          "name": "dispose",
          "description": "Disposes of the `_titleController` and `_descriptionController` when the widget is removed from the widget tree.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "build",
          "description": "Builds the user interface for the `AddTodoSheet` widget, including text input fields for the title and description, as well as buttons to save the new todo or cancel the operation.",
          "parameters": [
            "context: BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This Dart file is responsible for managing the dialog system in the Flutter application. It provides a centralized setup for registering custom dialog builders and handling different types of dialogs.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This method sets up the dialog service by registering custom dialog builders for different dialog types. It allows the application to display various types of dialogs, such as the 'InfoAlertDialog'.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "../ui/dialogs/info_alert/info_alert_dialog"
      ]
    },
    {
      "name": "lib/repositories/todo_repository.dart",
      "description": "The TodoRepository class is responsible for managing the application's todo items. It provides a centralized interface for CRUD (Create, Read, Update, Delete) operations on the todos, allowing other parts of the application to interact with the todo data in a consistent and organized manner.",
      "class_diagram": "@startuml\nclass TodoRepository {\n  - List<Todo> _todos\n  + List<Todo> getAllTodos()\n  + void addTodo(Todo todo)\n  + void updateTodo(Todo todo)\n  + void deleteTodo(String id)\n  + void toggleTodoCompletion(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "getAllTodos",
          "description": "Returns an unmodifiable list of all the todo items.",
          "parameters": null,
          "return_type": "List<Todo>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the repository.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the repository.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the repository by its ID.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a todo item by its ID.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:dory/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The `NoticeSheetModel` class is responsible for managing the state and behavior of a notice sheet UI component in a Flutter application. It serves as the view model for the notice sheet, encapsulating the logic and data necessary to display and interact with the notice sheet.",
      "class_diagram": "",
      "methods": [
        {
          "name": "NoticeSheetModel",
          "description": "The constructor for the `NoticeSheetModel` class. It initializes the base view model functionality provided by the `stacked` package.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This Dart file is responsible for setting up the service locator used throughout the application. The service locator is a key architectural pattern that allows for the easy management and injection of dependencies, making the application more modular, testable, and maintainable.",
      "class_diagram": "@startuml\nclass StackedLocator {\n  +static instance: StackedLocator\n  +registerEnvironment(environment, environmentFilter)\n  +registerLazySingleton(service)\n}\nclass BottomSheetService {\n}\nclass DialogService {\n}\nclass NavigationService {\n}\n\nStackedLocator *-- BottomSheetService\nStackedLocator *-- DialogService\nStackedLocator *-- NavigationService\n@enduml",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the various services and dependencies with the service locator. It allows the application to have a centralized and consistent way of managing and accessing these dependencies.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_list.dart",
      "description": "The `TodoList` widget is responsible for rendering a list of todos and providing interaction handlers for toggling, deleting, and editing individual todo items.",
      "class_diagram": "@startuml\nclass TodoList {\n  + Widget build(BuildContext context)\n  + final List<Todo> todos\n  + final Function(String) onToggle\n  + final Function(String) onDelete\n  + final Function(Todo) onEdit\n}\n\nclass TodoItem {\n  + Widget build(BuildContext context)\n  + final Todo todo\n  + final Function() onToggle\n  + final Function() onDelete\n  + final Function() onEdit\n}\n\nTodoList *-- TodoItem\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the `ListView` of `TodoItem` widgets based on the provided list of `Todo` objects.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:dory/models/todo.dart",
        "package:dory/features/home/widgets/todo_item.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/add_todo_sheet.dart",
      "description": "The `AddTodoSheet` class is responsible for providing a user interface for adding new todo items. It represents a modal sheet that appears when the user wants to create a new todo. The class handles the input of the todo title and description, validates the form, and then notifies the parent component of the new todo details.",
      "class_diagram": "@startuml\nclass AddTodoSheet {\n  -TextEditingController _titleController\n  -TextEditingController _descriptionController\n  -GlobalKey<FormState> _formKey\n  +Function(SheetResponse response)? completer\n  +SheetRequest request\n  +build(context): Widget\n  +dispose(): void\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the user interface of the modal sheet, including the form fields for title and description, and the buttons for adding the todo or canceling the operation.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "dispose",
          "description": "Disposes of the text editing controllers to free up resources when the widget is no longer needed.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This file provides a collection of UI helper functions and constants that are used throughout the application to ensure consistent spacing, sizing, and responsive layout across various screens and devices.",
      "class_diagram": "@startuml\n\nclass UIHelpers {\n  +const horizontalSpaceTiny: SizedBox\n  +const horizontalSpaceSmall: SizedBox\n  +const horizontalSpaceMedium: SizedBox\n  +const horizontalSpaceLarge: SizedBox\n  \n  +const verticalSpaceTiny: SizedBox\n  +const verticalSpaceSmall: SizedBox\n  +const verticalSpaceMedium: SizedBox\n  +const verticalSpaceLarge: SizedBox\n  +const verticalSpaceMassive: SizedBox\n  \n  +const spacedDivider: Column\n  \n  +verticalSpace(double height): SizedBox\n  +screenWidth(BuildContext context): double\n  +screenHeight(BuildContext context): double\n  +screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  +screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  +halfScreenWidth(BuildContext context): double\n  +thirdScreenWidth(BuildContext context): double\n  +quarterScreenWidth(BuildContext context): double\n  +getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  +getResponsiveSmallFontSize(BuildContext context): double\n  +getResponsiveMediumFontSize(BuildContext context): double\n  +getResponsiveLargeFontSize(BuildContext context): double\n  +getResponsiveExtraLargeFontSize(BuildContext context): double\n  +getResponsiveMassiveFontSize(BuildContext context): double\n  +getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n\n@enduml",
      "methods": [
        {
          "name": "verticalSpace",
          "description": "Returns a SizedBox with the specified height.",
          "parameters": [
            "double height"
          ],
          "return_type": "SizedBox"
        },
        {
          "name": "screenWidth",
          "description": "Returns the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Returns the height of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the screen height, optionally with an offset and a maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "Returns a fraction of the screen width, optionally with an offset and a maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "Returns half the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "Returns one-third of the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "Returns one-quarter of the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Returns a responsive horizontal spacing value based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Returns a responsive small font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "Returns a responsive medium font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "Returns a responsive large font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "Returns a responsive extra-large font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "Returns a responsive massive font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size based on the screen width, with optional font size and maximum value.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the core todo-related functionality of the application. It acts as a bridge between the user interface and the underlying todo data repository, providing a set of methods to create, read, update, and delete todo items.",
      "class_diagram": "@startuml\nclass TodoService {\n  - TodoRepository _repository\n  - Logger _logger\n  + List<Todo> getAllTodos()\n  + void addTodo(String title, String description)\n  + void updateTodo(Todo todo)\n  + void deleteTodo(String id)\n  + void toggleTodoCompletion(String id)\n}\n\nTodoService o-- TodoRepository\nTodoService o-- Logger\n@enduml",
      "methods": [
        {
          "name": "getAllTodos",
          "description": "Retrieves a list of all todo items from the repository.",
          "parameters": [],
          "return_type": "List<Todo>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item with the given title and description, and adds it to the repository.",
          "parameters": [
            "String title",
            "String description"
          ],
          "return_type": null
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the repository.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item with the given ID from the repository.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a todo item with the given ID in the repository.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "dory/models/todo.dart",
        "dory/repositories/todo_repository.dart",
        "logger/logger.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding view/screen classes, and provides methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigationService {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current view with the HomeView screen",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current view with the StartupView screen",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "dory/features/home/home_view.dart",
        "dory/features/startup/startup_view.dart",
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_item.dart",
      "description": "The TodoItem widget is responsible for rendering a single todo item in the home screen of the application. It provides the UI and functionality to display, toggle, edit, and delete a todo item.",
      "class_diagram": "@startuml\nclass TodoItem {\n  +final Todo todo\n  +final VoidCallback onToggle\n  +final VoidCallback onDelete\n  +final VoidCallback onEdit\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the TodoItem, including a Checkbox to toggle the todo's completion status, the todo's title and description, and buttons to edit or delete the todo.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "dory/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This Dart file defines an InfoAlertDialog widget, which is a custom dialog UI component used to display informative alerts or messages to the user. The dialog provides a clear, concise way to convey important information to the user and allows them to easily acknowledge and dismiss the alert.",
      "class_diagram": "@startuml\nclass InfoAlertDialog extends StackedView<InfoAlertDialogModel> {\n  - DialogRequest request\n  - Function(DialogResponse) completer\n  + builder(BuildContext, InfoAlertDialogModel, Widget)\n  + viewModelBuilder(BuildContext)\n}\n\nclass InfoAlertDialogModel {\n}\n\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI of the InfoAlertDialog widget. It takes in the dialog request and completer function, and returns the UI elements for the dialog.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the InfoAlertDialogModel to the StackedView. This model class likely contains the state and logic for the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "dory/ui/common/app_colors.dart",
        "dory/ui/common/ui_helpers.dart",
        "dory/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/models/todo.dart",
      "description": "This Dart file defines a `Todo` class that represents a basic to-do item within a task management application. The `Todo` class encapsulates the essential properties and functionality of a to-do item, such as its unique identifier, title, description, completion status, and creation timestamp.",
      "class_diagram": "@startuml\nclass Todo {\n  -String id\n  -String title\n  -String description\n  -bool isCompleted\n  -DateTime createdAt\n  +copyWith(...)\n  +toJson()\n  +fromJson(...)\n  +get props()\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new `Todo` instance with the provided updates, allowing the caller to easily modify an existing `Todo` object without creating a new one from scratch.",
          "parameters": [
            "String? id",
            "String? title",
            "String? description",
            "bool? isCompleted",
            "DateTime? createdAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "toJson",
          "description": "Converts the `Todo` object to a JSON map, which can be used for serialization and storage purposes.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Constructs a new `Todo` object from a JSON map, which can be used for deserialization and retrieval purposes.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "Todo"
        },
        {
          "name": "get props",
          "description": "Returns a list of the `Todo` object's properties, which is used by the `Equatable` mixin to provide equality comparison functionality.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for displaying a bottom sheet UI component that presents a notice or alert to the user. It is part of the application's user interface and is designed to provide a clear and concise way to communicate important information to the user.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  - Function(SheetResponse)? completer\n  - SheetRequest request\n  + builder(BuildContext, NoticeSheetModel, Widget?)\n  + viewModelBuilder(BuildContext)\n}\n\nclass NoticeSheetModel {\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The `builder` method is responsible for rendering the UI of the `NoticeSheet`. It constructs the bottom sheet UI based on the provided `request` object, which contains the title and description of the notice.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method creates an instance of the `NoticeSheetModel`, which is used to manage the state and logic of the `NoticeSheet`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "dory/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "dory/ui/common/app_colors.dart",
        "dory/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up and managing the bottom sheet UI in the application. It defines the different types of bottom sheets available and provides a centralized way to configure and register them with the BottomSheetService.",
      "class_diagram": "@startuml\nclass BottomSheetType {\n  notice\n}\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass NoticeSheet {\n  + NoticeSheet(request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetType -> BottomSheetService: \"setCustomSheetBuilders\"\nBottomSheetService -> NoticeSheet: \"builds\"\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Configures the BottomSheetService with the available bottom sheet types and their corresponding builders.",
          "parameters": [
            "context",
            "request",
            "completer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is responsible for managing the application-level state and functionality in a Flutter application built using the `stacked` architecture.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void initialize()\n  +void dispose()\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the application state and sets up any necessary dependencies.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "dispose",
          "description": "Cleans up any resources used by the application, such as closing streams or canceling subscriptions.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoRepository\nparticipant TodoService\n\nUser -> AppView: Launch app\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> TodoService: Initialize todos\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact (add/update/delete todo)\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> TodoService: CRUD operations\nTodoService -> TodoRepository: Interact with todo data\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\nHomeView <- HomeViewModel: Update UI\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. The ViewModels (e.g., HomeViewModel, StartupViewModel) handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, allowing the ViewModels to access services like the TodoService and BottomSheetService. The app.router.dart file manages navigation between views, ensuring a consistent and structured approach to screen transitions.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs the AppView. The AppView initializes the Stacked architecture and shows the StartupView. After completing the initialization logic, the StartupViewModel navigates to the HomeView. Navigation between views is handled by the Stacked Router defined in app.router.dart, which provides methods to navigate to and replace different screens."
}